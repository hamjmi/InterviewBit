/*
Letter Phone

Problem Description

Given a digit string A, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.



The digit 0 maps to 0 itself. The digit 1 maps to 1 itself.

NOTE: Make sure the returned strings are lexicographically sorted.



Problem Constraints

1 <= |A| <= 10



Input Format

The only argument is a digit string A.



Output Format

Return a string array denoting the possible letter combinations.



Example Input

Input 1:

 A = "23"
Input 2:

 A = "012"


Example Output

Output 1:

 ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
Output 2:

 ["01a", "01b", "01c"]


Example Explanation

Explanation 1:

 There are 9 possible letter combinations.
Explanation 2:

 Only 3 possible letter combinations.
 */
 
 unordered_map<int, string > mp;


vector<string> finalList;

void letterCombinationsHelper(string chosen, string rem)
{
    if (rem.size() == 0)
    {
        finalList.push_back(chosen);
        return;
    }

    int number = rem[0] - '0';
    string number2char = mp[number];
    int n = number2char.length();

    rem.erase(0, 1);
    for (int i = 0; i < n; i++)
    {
        chosen += number2char[i];
        letterCombinationsHelper(chosen, rem);
        chosen.erase(chosen.length() - 1, 1);
    }
}
vector<string> Solution::letterCombinations(string A) {
    mp[0]="0";
    mp[1]="1";
    mp[2]="abc";
    mp[3]="def";
    mp[4]="ghi";
    mp[5]="jkl";
    mp[6]="mno";
    mp[7]="pqrs";
    mp[8]="tuv";
    mp[9]="wxyz";
    finalList.clear();
    letterCombinationsHelper("",A);
    return finalList;
}
