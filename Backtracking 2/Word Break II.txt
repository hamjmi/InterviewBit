/*
Word Break II


Given a string A and a dictionary of words B, add spaces in A to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

Note : Make sure the strings are sorted in your result.

Input Format:

The first argument is a string, A.
The second argument is an array of strings, B.
Output Format:

Return a vector of strings representing the answer as described in the problem statement.
Constraints:

1 <= len(A) <= 50
1 <= len(B) <= 25
1 <= len(B[i]) <= 20
Examples:

Input 1:
    A = "b"
    B = ["aabbb"]

Output 1:
    []

Input 1:
    A = "catsanddog",
    B = ["cat", "cats", "and", "sand", "dog"]

Output 1:
    ["cat sand dog", "cats and dog"]
    
    */
    
    unordered_set<string> dictionary;
vector<string> finalList;

void permute(string A, int index, string chosen, vector<string>& list, int currCount)
{
	
	if (index == A.size())
	{
		
		if (currCount == A.size())
		{
			string answer = "";
			for (int i = 0; i < list.size(); i++)
			{
			    answer += list[i];
			    answer+=" ";
            }
            answer.erase(answer.length()-1,1);
			finalList.push_back(answer);
		}
		return;
	}

	chosen += A[index];
	if (dictionary.find(chosen) != dictionary.end())
	{
		list.push_back(chosen);
		(currCount) += chosen.size();
		chosen = "";
		permute(A, index+1, chosen, list, currCount);
		chosen = list[list.size() - 1];
		currCount -= chosen.size();
		list.pop_back();
	}
	permute(A, index + 1, chosen, list, currCount);
}

vector<string> Solution::wordBreak(string A, vector<string> &B) {
    dictionary.clear();
	finalList.clear();

	for (int i = 0; i < B.size(); i++)
	{
		dictionary.insert(B[i]);
	}

	vector<string> list;
	int index = 0;
	string chosen = "";
	int currentCount = 0;
	permute(A, index, chosen, list, currentCount);
	return finalList;
}
