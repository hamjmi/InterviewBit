/*

ALL GCD PAIR


Problem Description

Given an array of integers A of size N containing GCD of every possible pair of elements of another array.

Find and return the original numbers which are used to calculate the GCD array in any order. For example, if original numbers are {2, 8, 10} then the given array will be {2, 2, 2, 2, 8, 2, 2, 2, 10}.



Problem Constraints

1 <= N <= 10000

1 <= A[i] <= 109



Input Format

The first and only argument given is the integer array A.



Output Format

Find and return the original numbers which are used to calculate the GCD array in any order.



Example Input

Input 1:

 A = [2, 2, 2, 2, 8, 2, 2, 2, 10]
Input 2:

 A = [5, 5, 5, 15]


Example Output

Output 1:

 [2, 8, 10]
Output 2:

 [5, 15]


Example Explanation

Explanation 1:

 Initially, array A = [2, 2, 2, 2, 8, 2, 2, 2, 10].
 2 is the gcd between 2 and 8, 2 and 10.
 8 and 10 are the gcds pair with itself.
 Therefore, [2, 8, 10] is the original array.
Explanation 2:

 Initially, array A = [5, 5, 5, 15].
 5 is the gcd between 5 and 15.
 15 is the gcds pair with itself.
 Therefore, [5, 15] is the original array.
 
 */
 
 
 int gcd(int a, int b)
{
    if(b==0)
        return a;
    return gcd(b,a%b);
}

vector<int> Solution::solve(vector<int> &A) {
    //make a frequency array
    //largest no will always be in original array
    //take it and store it
    //now include next highest and decrease the count of gcd of selected values from freq array.
    
    sort(A.begin(),A.end(),greater<>());
    //store count of every value possible
    int freq[A[0]+1]={0};
    
    int n=A.size();
    for(int i=0;i<n;i++)
    {
        freq[A[i]]++;
    }
    
    //since every element is paired with every other and if n is size of final array, then original would have been sqrt(n);
    
    int s=sqrt(n);
    vector<int> res; 
    
    for(int i=0;i<n;i++)
    {
        if(freq[A[i]] > 0)
        {
            res.push_back(A[i]);
        
            freq[A[i]]--;
        
            
            for(int j=0;j<res.size();j++)
            {
                if(i!=j)
                {
                    //find gcd of selected elements
                    int x=gcd(A[i],res[j]);
                    
                    //removing from freq array 2 at a time , as gcd(A[i],A[j])=gcd(A[j],A[i]) taken twice. 
                    freq[x]-=2;
                }
            }
        }
    }
    
    return res;
    
}
