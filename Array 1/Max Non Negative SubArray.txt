/*
Max Non Negative SubArray
Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray.

NOTE:

    1. If there is a tie, then compare with segment's length and return segment which has maximum length.
    2. If there is still a tie, then return the segment with minimum starting index.


Input Format:

The first and the only argument of input contains an integer array A, of length N.
Output Format:

Return an array of integers, that is a subarray of A that satisfies the given conditions.
Constraints:

1 <= N <= 1e5
-INT_MAX < A[i] <= INT_MAX
Examples:

Input 1:
    A = [1, 2, 5, -7, 2, 3]

Output 1:
    [1, 2, 5]

Explanation 1:
    The two sub-arrays are [1, 2, 5] [2, 3].
    The answer is [1, 2, 5] as its sum is larger than [2, 3].

Input 2:
    A = [10, -1, 2, 3, -4, 100]

Output 2:
    [100]

Explanation 2:
    The three sub-arrays are [10], [2, 3], [100].
    The answer is [100] as its sum is larger than the other two.
*/


vector<int> Solution::maxset(vector<int> &A) {
    int n=A.size();
    long long int curr_sum=0;
    long long int max=-1e17;
    int start=0;
    int end=-1;
    int len=-1;
    int mstart=-1;
    bool flag=false;
    for(int i=0;i<n;i++)
    {
        if(A[i] >=0)
        {
            // cout<<i<<" "<<curr_sum<<endl;
            curr_sum+=A[i];
            end=i;
            flag=true;
            //cout<<i<<" "<<curr_sum<<endl;
        }
        else
        {
            // cout<<i<<" "<<curr_sum<<endl;
            //flag represent that atleast one positive number has occured , helps when negative no is at first place
            //otherwise it will fail for input =[-1, -1 ,-1 , 6] type
            //checks if curr_sum is greater than curr_max , if equal then length is greater , if length is also equal then early start
            if(flag && (curr_sum > max || (curr_sum == max && (len<(end-start+1) || (len==(end-start+1) && mstart > start) ) ) ))
            {
                max=curr_sum;
                len=end-start+1;
                mstart=start;
            }
            curr_sum=0;
            start=i+1;
            end=-1;
           // cout<<i<<" "<<curr_sum<<endl;
        }
    }
    //checks when curr_sum has value and we break out of loop
    if(flag && (curr_sum > max || (curr_sum == max && (len<(end-start+1) || (len==(end-start+1) && mstart > start) ) ) ))
    {
        max=curr_sum;
        len=end-start+1;
        mstart=start;
    }
    
    vector<int> ans;
    //if all element is -ve , we have initial value as of len=-1, then ,it won't enter this loop
    for(int i=0;i<len;i++)
    {
        ans.push_back(A[i+mstart]);
    }
    return ans;
}
