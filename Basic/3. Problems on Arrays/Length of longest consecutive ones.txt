/*
Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved.


Input Format

The only argument given is string A.
Output Format

Return the length of the longest consecutive 1’s that can be achieved.
Constraints

1 <= length of string <= 1000000
A contains only characters 0 and 1.
For Example

Input 1:
    A = "111000"
Output 1:
    3

Input 2:
    A = "111011101"
Output 2:
    7
*/

int Solution::solve(string A) {
    int l=A.length();
    int left[l];
    int right[l];
    
    if(A[0]=='0')
        left[0]=0;
    else
        left[0]=1;
    
    int count=0;
    for(int i=1;i<l;i++)
    {
        if(A[i]=='1')
        {
            left[i]=left[i-1]+1;
        }
        else
            left[i]=0;
    }
    
    if(A[l-1]=='0')
        right[l-1]=0;
    else
        right[l-1]=1;
    
    for(int i=l-2;i>=0;i--)
    {
        if(A[i]=='1')
        {
            right[i]=right[i+1]+1;
        }
        else
            right[i]=0;
    }
    
    
    //int ans= INT_MIN;
    int temp;
    
   /* for(int i=0;i<l;i++)
        cout<<left[i]<<" ";
    cout<<endl;
    
    for(int i=0;i<l;i++)
        cout<<right[i]<<" ";
    cout<<endl;
    */
    for(int i=0;i<l;i++)
    {
        if(A[i]=='1')
            count++;
    }
    
   // cout<<count<<endl;
    
    
    int ans=INT_MIN;
    
    for(int i=0;i<l;i++)
    {
        if(A[i]=='1')
        {
            if(i>0 && i<l-1)
                ans=max(ans,left[i]+right[i]-1);
            else if(i==l-1)
                ans=max(ans,left[i]);
            else
                ans=max(ans,right[i]);
        }
        else
        {
            if(i>0 && i<l-1)
                temp=left[i-1]+right[i+1]+1;
            else if(i==l-1)
                temp=left[i-1]+1;
            else
                temp=right[i+1]+1;
                
            if(temp > count)
                temp--;
                
            ans=max(ans,temp);
        }
    }
    return ans;
}

