/*
roblem Description

A robot is located at the top-left corner of an A x B grid (marked 'Start' in the diagram below).



The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?



Problem Constraints
A and B will be such that the resulting answer fits in a 32 bit signed integer.



Input Format
First argument of input will be single integer A.
Second argument of input will be single integer B.



Output Format
Return a single integer denoting the number of unique paths.



Example Input
 A = 2, B = 2


Example Output
 2


Example Explanation
 2 possible routes : (0, 0) -> (0, 1) -> (1, 1) 
              OR  : (0, 0) -> (1, 0) -> (1, 1)
*/

int Solution::uniquePaths(int A, int B) {
    /*if(A==1 || B==1)
    {
        return 1;
    }
    return uniquePaths(A-1,B)+uniquePaths(A,B-1);*/
    /*if(B==1)
    {
        return 1;
    }
    return (int)((long)uniquePaths(A, B - 1) * (A + B - 2) / (B - 1));*/
    
    /*int hc = B - 1;
    int vc = A - 1;
    long wc = 1;
    for (int i = 1; i <= hc; i++)
         wc = wc * (i + vc) / i;
    return (int)wc;*/
    
    /*int mat[A][B];
    for(int i=0;i<A;i++)
        mat[i][0]=1;
    
    for(int i=0;i<B;i++)
        mat[0][i]=1;
        
     for (int i = 1; i < A; i++) {
        for (int j = 1; j < B; j++)
        {
            mat[i][j] = mat[i - 1][j] + mat[i][j - 1];
        }
    }
    return mat[A - 1][B - 1];*/
    
     //vector<int> mat(B,1);
     /*vector<int> mat(B);
    int value = 1;
    fill(mat.begin(), mat.end(), value);*/
     
     /*if(A>INT_MAX || B>INT_MAX)
        return 0;
     
     int mat[B]={1};
     for (int i = 0; i < A; i++) 
     {
        for (int j = 1; j < B; j++)
        {
            if(mat[j] > INT_MAX - mat[j-1])
                return 0;

            mat[j]+= mat[j - 1];
        }
    }
    
    return mat[B - 1];*/
    
    int maximum=max(A,B);
    
    long long int answer=1;
    for(long long int i=maximum;i<(A+B-1);i++)
    {
        answer=(long long int)answer*i;
        answer=(long long int)answer/(i-maximum+1);
    }
    return (long long int)answer;
    
    /*int n=A+B-2;
    int k=B-1;
    int C[k + 1];
    memset(C, 0, sizeof(C));
 
    C[0] = 1;
 
    for (int i = 1; i <= n; i++) {
        for (int j = min(i, k); j > 0; j--)
            C[j] = C[j] + C[j - 1];
    }
    return C[k];*/
}
