/*
All Unique Permutations


Problem Description

Given an array A of size N denoting collection of numbers that might contain duplicates, return all possible unique permutations.

NOTE: No 2 entries in the permutation sequence should be the same.

WARNING: DO NOT USE LIBRARY FUNCTION FOR GENERATING PERMUTATIONS. Example : next_permutations in C++ / itertools.permutations in python.
If you do, we will disqualify your submission retroactively and give you penalty points.


Problem Constraints

1 <= |A| <= 9

0 <= A[i] <= 10



Input Format

Only argument is an integer array A of size N.



Output Format

Return a 2-D array denoting all possible unique permutation of the array.



Example Input

Input 1:

A = [1, 1, 2]
Input 2:

A = [1, 2]


Example Output

Output 1:

[ [1,1,2]
  [1,2,1]
  [2,1,1] ]
Output 2:

[ [1, 2]
  [2, 1] ]


Example Explanation

Explanation 1:

 All the possible unique permutation of array [1, 1, 2].
Explanation 2:

 All the possible unique permutation of array [1, 2].
 
 */
 
 vector<vector<int> > finalList;
set<vector<int> > setList;
void permuteHelp(vector<int> chosen, vector<int> rem)
{
    if (rem.size() == 0)
    {
        if(setList.find(chosen)==setList.end())
        {
            finalList.push_back(chosen);
            setList.insert(chosen);
        }
           
        return;
    }
    int n = rem.size();

    for (int i = 0; i < n; i++)
    {
        //chose an element
        int temp = rem[i];

        //adding it to chosen list
        chosen.push_back(temp);

        //removing from remaining list
        rem.erase(rem.begin()+i);

        //now calling for all subsequent permutation
        permuteHelp(chosen, rem);

        //backtracking and unchooosing the above element

        //remove from chosen
        chosen.erase(chosen.end() - 1);

        //adding it back to remaining list at ith position
        rem.insert(rem.begin()+i, temp);

    }
}

vector<vector<int> > Solution::permute(vector<int> &A) {
    vector<int> chosen;
    finalList.clear();
    setList.clear();
    permuteHelp(chosen,A);
    return finalList;
}
