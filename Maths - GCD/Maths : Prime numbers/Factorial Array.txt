/*

Factorial Array


Problem Description

Groot has an array A of size N. Boring right? Groot thought so too, so he decided to construct another array B of the same size and defined elements of B as:

B[i] = factorial of A[i] for every i such that 1<= i <= N.

factorial of a number X denotes (1 x 2 x 3 x 4……(X-1) x (X)).
Now Groot is interested in the total number of non-empty subsequences of array B such that every element in the subsequence has the same non empty set of prime factors.

Since the number can be very large, return it modulo 109 + 7.

NOTE: A set is a data structure having only distinct elements. Eg : the set of prime factors of Y=12 will be {2,3} and not {2,2,3}



Problem Constraints

1 <= N <= 105
1 <= A[i] <= 106
Your code will run against a maximum of 5 test cases.



Input Format

Only argument is an integer array A of size N.



Output Format

Return an integer deonting the total number of non-empty subsequences of array B such that every element in the subsequence has the same set of prime factors modulo 109+7.



Example Input

Input 1:

 A = [2, 3, 2, 3]
Input 2:

 A = [2, 3, 4]


Example Output

Output 1:

 6
Output 2:

 4


Example Explanation

Explanation 1:

 Array B will be : [2, 6, 2, 6]
 The total possible subsequences are 6 : [2], [2], [2, 2], [6], [6], [6, 6].
Input 2:

 Array B will be : [2, 6, 24]
 The total possible subsequences are 4 : [2], [6], [24], [6, 24].
 
 */
 
 
 long long int fastExp(long long int a, long long int b, long long int m)
{
    if(b==0)
        return 1;

    if(b%2==0)
    {
        return fastExp((a*a)%m,b/2,m);
    }
    else
    {
        return (a*fastExp((a*a)%m,(b-1)/2,m))%m;
    }
}
int Solution::solve(vector<int> &A) {
    int ma=INT_MIN;
    int n=A.size();
    for(int i=0;i<n;i++)
    {
        ma=max(ma,A[i]);
    }
   
    vector<int> prime(ma+1,1);
    
    prime[0]=0; prime[1]=0;
    for(int i=2;i*i<=ma;i++)
    {
        if(prime[i]==1)
        {
            for(int j=i*i;j<=ma;j+=i)
            {
                prime[j]=0;
            }
        }
    }
    
    for(int i=1;i<=ma;i++)
    {
        prime[i]+=prime[i-1];
    } 
    
    /*for(int i=0;i<=ma;i++)
    {
        cout<<prime[i]<<" ";
    } 
    cout<<endl;*/
    
    unordered_map<int, long long int> mp;
    unordered_map<int, long long int>  :: iterator it;
    for(int i=0;i<n;i++)
    {
        if(A[i]==1)
            continue;
            
        mp[prime[A[i]]]++;
    } 
    
   
    
    long long int ans=0;
    long long int m= 1000000007;  
    
    for(it=mp.begin();it!=mp.end();it++)
    {
        //ans=(ans+fastExp(2,it->second,m))%m;
        ans=(ans+((long long int)(1<<it->second))%m)%m;
    }
    
    ans=(ans-mp.size()+m)%m;
    return ans;
}
