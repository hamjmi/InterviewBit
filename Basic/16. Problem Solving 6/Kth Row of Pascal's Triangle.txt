/*
Problem Description

Given an index k, return the kth row of the Pascal's triangle.
Pascal's triangle: To generate A[C] in row R, sum up A'[C] and A'[C-1] from previous row R - 1.

Example:

Input : k = 3

Return : [1,3,3,1]
Note: k is 0 based. k = 0, corresponds to the row [1].

Note: Could you optimize your algorithm to use only O(k) extra space?
*/


void print(vector<int> v)
{
    int n=v.size();
    for(int i=0;i<n;i++)
        cout<<v[i]<<" ";
    cout<<endl;
}
vector<int> Solution::getRow(int A) {
    vector<int> vec(A+1,0);
   // vec[0]=1;
    for(int i=0;i<=A;i++)
    {
       // print(vec);
        vec[i]=1;
        vector<int> temp=vec;
        for(int j=1;j<i;j++)
        {
           // cout<<i<<" "<<j<<endl;
            vec[j]=temp[j-1]+temp[j];
        }
    }
    return vec;
}


