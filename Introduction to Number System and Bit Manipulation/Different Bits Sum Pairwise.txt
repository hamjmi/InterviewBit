/*
Different Bits Sum Pairwise

Problem Description

We define f(X, Y) as number of different corresponding bits in binary representation of X and Y.
For example, f(2, 7) = 2, since binary representation of 2 and 7 are 010 and 111, respectively. The first and the third bit differ, so f(2, 7) = 2.

You are given an array of N positive integers, A1, A2 ,..., AN. Find sum of f(Ai, Aj) for all pairs (i, j) such that 1 ≤ i, j ≤ N. Return the answer modulo 109+7.



Problem Constraints

1 <= N <= 105

1 <= A[i] <= 231 - 1



Input Format

First and only argument of input contains a single integer array A.



Output Format

Return a single integer denoting the sum.



Example Input

Input 1:

 A = [1, 3, 5]
Input 2:

 A = [2, 3]


Example Output

Ouptut 1:

 8
Output 2:

 2


Example Explanation

Explanation 1:

 f(1, 1) + f(1, 3) + f(1, 5) + f(3, 1) + f(3, 3) + f(3, 5) + f(5, 1) + f(5, 3) + f(5, 5) 
 = 0 + 1 + 1 + 1 + 0 + 2 + 1 + 2 + 0 = 8
Explanation 2:

 f(2, 2) + f(2, 3) + f(3, 2) + f(3, 3) = 0 + 1 + 1 + 0 = 2
 */
 
 /*
 2 => 0 1 0
 3 => 0 1 1
 4 => 1 0 0
 5 => 1 0 1
 6 => 1 1 0
 
 in question f(2,3) will give 2 , so if we look at their binary representation then, we can see they differ in first bit.
 also f(2,3)= f(3,2) so it would be multiplied by 2.
 
 so for every bit we find count of numbers having ith bit set , then countunsetbit is (n- countsetbits).
 we can multiply them both to find answer , but since it is two way round
 
 answer+= (countunsetbit * countsetbits * 2);
*/

int Solution::cntBits(vector<int> &A) {
    int ma= A[0];
    int n=A.size();
    //maximum number in an array
    for(int i=1;i<n;i++)
    {
        ma=max(ma, A[i]);
    }
    
    int bits;
    //number of bits required to store all values
    if(ma==INT_MAX)
        bits= log2(ma);
    else
        bits= log2(ma+1);
      
    long long int answer=0;
    long long int m=1000000007; 
    for(int i=0;i<=bits;i++)
    {
        long long int setbits=0;
        for(int j=0;j<n;j++)
        {
            if(A[j] & (1<<i))
            {
                setbits++;
            }
        }
        long long int unsetbits= n-setbits;
        answer = (answer + ((setbits*unsetbits)%m *2)%m)%m;
    }
    return answer;
}
