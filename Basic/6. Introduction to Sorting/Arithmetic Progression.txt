/*
Problem Description

Given an integer array A of size N. Return 1 if the array can be rearranged to form an arithmetic progression, otherwise, return 0.

A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.



Problem Constraints
2 <= N <= 105

-109 <= A[i] <= 109



Input Format
First and only argument is an integer array A of size N.



Output Format
Return 1 if the array can be rearranged to form an arithmetic progression, otherwise, return 0



Example Input
Input 1:

 A = [3, 5, 1]
Input 2:

 A = [2, 4, 1]


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.
Explanation 2:

 There is no way to reorder the elements to obtain an arithmetic progression.
*/

int Solution::solve(vector<int> &A) {
    int min1=*min_element(A.begin(),A.end());
    int min2=INT_MAX;
    unordered_set<int> s;
    int l=A.size();
    for(int i=0;i<l;i++)
    {
        s.insert(A[i]);
        if(A[i] < min2 && A[i]!=min1)
        {
            min2=A[i];
        }
    }
    
    int d=min2-min1;
    int check=min2;
    for(int i=2;i<l;i++)
    {
        check+=d;
        if(s.find(check)==s.end())
        {
            return 0;
        }
    }
    return 1;
}
