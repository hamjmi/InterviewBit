/*
Problem Description

You are given an integer N and the task is to reverse the digits of the given integer. Return 0 if the result overflows and does not fit in a 32 bit signed integer

Look at the example for clarification.



Problem Constraints
N belongs to the Integer limits.



Input Format
Input an Integer.



Output Format
Return a single integer denoting the reverse of the given integer.



Example Input
Input 1:

 x = 123

Input 2:

 x = -123


Example Output
Output 1:

 321

Ouput 2:

 -321


Example Explanation
 If the given integer is negative like -123 the output is also negative -321.
*/


int rev(int A, int type)
{
    int B=0;
    while(A)
    {
        int  rem=A%10;
        A=A/10;
        int temp=B;
        if((type==0 && -1*B < (INT_MIN+rem)/10 ) || (type==1 && B > (INT_MAX-rem)/10))
        {
            return 0;
        }
        B=B*10+rem;
        /*if(type==0 && -1*B > -1*temp || type==1 && B<temp)
        {
            //cout<<type<<" "<<A<<" "<<B<<" "<<temp<<" "<<rem<<endl;
            return 0;
        }
           
        if(type==0 && B<INT_MIN || type==1 && B>INT_MAX)
            return 0;
         cout<<A<<" "<<B<<endl;*/
    }
    return B;
}
int Solution::reverse(int A) {
    if(A<0)
    {
        int B=rev(-1*A, 0);
        return -1*B;
    }
    else
    {
        int B=rev(A, 1);
        return B;
    }
}
