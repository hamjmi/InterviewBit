/*
NQueens

Problem Description

The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer A, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.
The final list should be generated in such a way that the indices of the queens in each list should be in reverse lexicographical order.


Problem Constraints

1 <= A <= 10



Input Format

First argument is an integer n denoting the size of chessboard



Output Format

Return an array consisting of all distinct solutions in which each element is a 2d char array representing a unique solution.



Example Input

Input 1:

A = 4
Input 2:

A = 1


Example Output

Output 1:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Output 1:

[
 [Q]
]


Example Explanation

Explanation 1:

There exist only two distinct solutions to the 4-queens puzzle:
Explanation 1:

There exist only one distinct solutions to the 1-queens puzzle:
*/

vector<vector<string> > finalList;

void permute(int A, int row, vector<string> &board, vector<int> &colset, vector<int>& leftdiag, vector<int>& rightdiag)
{
	if(row==A)
	{
		finalList.push_back(board);
		/*for (int i = 0; i < A; i++)
		{
			cout << board[i] << "\n";
		}
		cout << endl;*/
		return;
	}
	
	for (int col = 0; col < A; col++)
	{
		if (colset[col]==0 && leftdiag[row + col]==0 && rightdiag[row - col + A - 1]==0)
		{
			//set something
			board[row][col] = 'Q';
			colset[col] = 1;
			leftdiag[row + col] = 1;
			rightdiag[row - col + A - 1] = 1;

			permute(A, row + 1, board, colset, leftdiag, rightdiag);

			//unset something
			rightdiag[row - col + A - 1] = 0;
			leftdiag[row + col] = 0;
			colset[col] = 0;
			board[row][col] = '.';
		}
	}

}
vector<vector<string> > Solution::solveNQueens(int A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<string> board;
	
	string s = "";
	for (int i = 0; i < A; i++)
	{
		s += ".";
	}

	for (int i = 0; i < A; i++)
	{
		board.push_back(s);
	}

	int row = 0;

	vector<int> colset(A, 0);
	vector<int> leftdiag((2*A) - 1, 0);
	vector<int> rightdiag((2*A) - 1, 0);
	
	finalList.clear();
	permute(A, row, board, colset, leftdiag, rightdiag);
	return finalList;
}
