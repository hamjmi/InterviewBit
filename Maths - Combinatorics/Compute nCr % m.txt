/*
 Compute nCr % m


Problem Description

Given three integers A, B and C, where A represents n, B represents r and C represents m, find and return the value of nCr % m where nCr % m = (n!/((n-r)!*r!))% m.

x! means factorial of x i.e. x! = 1 * 2 * 3... * x.



Problem Constraints

1 <= A * B <= 106

1 <= B <= A

1 <= C <= 106



Input Format

The first argument given is integer A ( = n).
The second argument given is integer B ( = r).
The third argument given is integer C ( = m).


Output Format

Return the value of nCr % m.



Example Input

Input 1:

 A = 5
 B = 2
 C = 13
Input 2:

 A = 6
 B = 2
 C = 13


Example Output

Output 1:

 10
Output 2:

 2


Example Explanation

Explanation 1:

 The value of 5C2 % 11 is 10.
Explanation 2:

 The value of 6C2 % 13 is 2.
 */
 
 int Solution::solve(int A, int B, int C) {
    /* Properties that will be used:
    a) nCn => nC0 => 1;
    b) nC1 => n;
    c) (n+1)C(r+1) => nC(r+1) + nCr
    i.e 4c2 => 3c1+ 3c2;

    Why aren't we using the same inv_modulus method that we did in nCr % p ?
    Because here (r!& m) and ((n-r)! & m) are not coprimes i.e gcd(r!,m)!=1 and gcd((n-r)!,m)!=1;

    We are gonna use tabulation method of DP to solve this:

    also nCr , 0<=r<=n , so we don't need to fill for r>n as it makes no sense; 
    Time and Space => O(n*r)
    
    Better approach Space = O(r) and Time = O(n*r);
    */
    
    vector<long long int> vec(B+1,1);
    for(int i=2;i<=A;i++)
    {
        vector<long long int > temp=vec;
        for(int j=1;j<i && j<=B;j++)
        {
            temp[j]=(vec[j-1]+vec[j])%C;
        }
        vec=temp;
    }
    
    return vec[B]%C;
}
