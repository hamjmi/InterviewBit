/*
Points on same line



Problem Description

Given two array of integers A and B describing a pair of (A[i], B[i]) coordinates in 2D plane. A[i] describe x coordinates of the ith point in 2D plane whereas B[i] describes the y-coordinate of the ith point in 2D plane.

Find and return the maximum number of points which lie on the same line.



Problem Constraints

1 <= (length of the array A = length of array B) <= 1000

-105 <= A[i], B[i] <= 105



Input Format

First argument is an integer array A.
Second argument is an integer array B.



Output Format

Return the maximum number of points which lie on the same line.



Example Input

Input 1:

 A = [-1, 0, 1, 2, 3, 3]
 B = [1, 0, 1, 2, 3, 4]
Input 2:

 A = [3, 1, 4, 5, 7, -9, -8, 6]
 B = [4, -8, -3, -2, -1, 5, 7, -4]


Example Output

Output 1:

 4
Output 2:

 2


Example Explanation

Explanation 1:

 The maximum number of point which lie on same line are 4, those points are {0, 0}, {1, 1}, {2, 2}, {3, 3}.
Explanation 2:

 Any 2 points lie on a same line.
 
 */
 
 
 int gcd(int a, int b)
{
    if(b==0)
        return a;
    return gcd(b,a%b);
}
int Solution::solve(vector<int> &A, vector<int> &B) {
    unordered_map<string , int> mp;
    unordered_map<string , int> :: iterator it;

    int ans=0;
    for(int i=0;i<A.size();i++)
    {
        mp.clear();
        int dup=1;
        for(int j=i+1;j<A.size();j++)
        {
            if(A[i]==A[j] && B[i]==B[j])
            {
                dup++;
            }
            else
            {
                int n= B[j]-B[i];
                int d= A[j]-A[i];
                int gcd_xy = gcd(n,d);

                string temp= to_string(n/gcd_xy)+"_"+to_string(d/gcd_xy);
                mp[temp]++;
            }
        }
        ans=max(ans,dup);
        int local_max=-1;
        for(it=mp.begin();it!=mp.end();it++)
        {
            local_max=max(local_max, it->second);
        }

        ans=max(ans, local_max+dup);
    }
    return ans;
}
