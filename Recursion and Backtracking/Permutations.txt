/*
 Permutations


Problem Description

Given an integer array A of size N denoting collection of numbers , return all possible permutations.

NOTE:

No two entries in the permutation sequence should be the same.
For the purpose of this problem, assume that all the numbers in the collection are unique.
Return the answer in any order
WARNING: DO NOT USE LIBRARY FUNCTION FOR GENERATING PERMUTATIONS. Example : next_permutations in C++ / itertools.permutations in python.
If you do, we will disqualify your submission retroactively and give you penalty points.


Problem Constraints

1 <= N <= 9



Input Format

Only argument is an integer array A of size N.



Output Format

Return a 2-D array denoting all possible permutation of the array.



Example Input

A = [1, 2, 3]


Example Output

[ [1, 2, 3]
  [1, 3, 2]
  [2, 1, 3] 
  [2, 3, 1] 
  [3, 1, 2] 
  [3, 2, 1] ]


Example Explanation

All the possible permutation of array [1, 2, 3].

*/

vector<vector<int> > finalList;

void permuteHelp(vector<int> chosen, vector<int> rem)
{
    if (rem.size() == 0)
    {
        finalList.push_back(chosen);
        return;
    }
    int n = rem.size();

    for (int i = 0; i < n; i++)
    {
        //chose an element
        int temp = rem[i];

        //adding it to chosen list
        chosen.push_back(temp);

        //removing from remaining list
        rem.erase(rem.begin()+i);

        //now calling for all subsequent permutation
        permuteHelp(chosen, rem);

        //backtracking and unchooosing the above element

        //remove from chosen
        chosen.erase(chosen.end() - 1);

        //adding it back to remaining list at ith position
        rem.insert(rem.begin()+i, temp);

    }
}

vector<vector<int> > Solution::permute(vector<int> &A) {
    vector<int> chosen;
    finalList.clear();
    permuteHelp(chosen,A);
    return finalList;
}
