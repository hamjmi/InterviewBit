/*
Maximum Unsorted Subarray


Problem Description

Given an array A of non-negative integers of size N. Find the minimum sub-array Al, Al+1 ,â€¦, Ar such that if we sort(in ascending order) that sub-array, then the whole array should get sorted. If A is already sorted, output -1.



Problem Constraints

1 <= N <= 1000000
1 <= A[i] <= 1000000



Input Format

First and only argument is an array of non-negative integers of size N.



Output Format

Return an array of length 2 where First element denotes the starting index(0-based) and second element denotes the ending index(0-based) of the sub-array. If the array is already sorted, return an array containing only one element i.e. -1.



Example Input

Input 1:

A = [1, 3, 2, 4, 5]
Input 2:

A = [1, 2, 3, 4, 5]


Example Output

Output 1:

[1, 2]
Output 2:

[-1]


Example Explanation

Explanation 1:

If we sort the sub-array A1, A2, then the whole array A gets sorted.
Explanation 2:

A is already sorted.
*/

vector<int> Solution::subUnsort(vector<int> &A) {
    int l=A.size();
    int s=-1;
    for(int i=0;i<l-1;i++)
    {
        if(A[i] > A[i+1])
        {
            s=i;
            break;
        }
    }
    if(s==-1)
    {
        vector<int> ans({-1});
        return ans;
    }
    
    int e=-1;
    for(int i=l-1;i>0;i--)
    {
        if(A[i] < A[i-1])
        {
            e=i;
            break;
        }
    }
   
    
    int ma=INT_MIN;
    int mi=INT_MAX;
    for(int i=s;i<=e;i++)
    {
        ma=max(ma,A[i]);
        mi=min(mi,A[i]);
    }
   
    int index=e;
    for(int i=e+1;i<l;i++)
    {
        if(A[i] < ma)
        {
            index=i;
        }
    }
    e=index;
     
    index=s;  
    for(int i=s-1;i>=0;i--)
    {
        if(A[i] > mi)
        {
            index=i;
        }
    }
    s=index;
    
    vector<int> ans({s, e});
    return ans;
}
