/*
Problem Description

Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003



Problem Constraints
1 <= |A| <= 1000



Input Format
First argument is a string A.



Output Format
Return an integer denoting the rank of the given string.



Example Input
Input 1:

A = "acb"
Input 2:

A = "a"


Example Output
Output 1:

2
Output 2:

1


Example Explanation
Explanation 1:

Given A = "acd".
The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
So, the rank of A is 2.
Explanation 2:

Given A = "a".
Rank is clearly 1.
*/

/*long long int m= 1000003;
long long int fact(long long int n)
{
    if(n==0)
        return 1;
    
    long long int ret= (n*fact(n-1))%m;
    return ret;
}
int Solution::findRank(string A) {
    long long int freqArray[256]={0};
    long long int l=A.length();
    long long int multiplier=fact(l);
    long long int ans=1;
    
    for(int i=0;i<l;i++)
        freqArray[A[i]]++;
        
    for(int i=1;i<256;i++)
        freqArray[i]+=freqArray[i-1];
        
    for(int i=0;i<l;i++)
    {
        multiplier/=l-i;
        ans= (ans+((freqArray[A[i]-1]%m)*(multiplier%m ))%m)%m;
        
        for(int j=A[i];j<256;j++)
            freqArray[j]--;
    }
    return ans;
}*/
int m= 1000003;
int fact(int n)
{
    if(n==0)
        return 1;
    
    return (n*fact(n-1))%m;
}
int Solution::findRank(string A)
{
    int l=A.length();
    int ans=0;
    for(int i=0;i<l-1;i++)
    {
        int count=0;
        for(int j=i+1;j<l;j++)
        {
            if(A[i] > A[j])
                count++;
        }
        ans+=(count*fact(l-i-1))%m;
    }
    return (ans+1)%m;
}
