/*

Problem Description

Given an integer A, return the number of trailing zeroes in A! i.e. factorial of A.

Note: Your solution should run in logarithmic time complexity.



Problem Constraints
1 <= A <= 109



Input Format
First and only argument is a single integer A.



Output Format
Return a single integer denoting number of zeroes.



Example Input
Input 1

 A = 5
Input 2:

 A = 6


Example Output
Output 1:

 1
Output 2:

 1


Example Explanation
Explanation 1:

 A! = 120.
 Number of trailing zeros = 1. So, return 1.
Explanation 2:

 A! = 720 
 Number of trailing zeros = 1. So, return 1.
 */
 
 int Solution::trailingZeroes(int A) {
    //count no of 2's and 5's in prime factorisation of n!
    // count of 2 >= count of 5 , better count only 5
    // count5= (n/5) + (n/25)+ (n/125)+ ...
    
    
    int ans=0;
    int div=5;
    while(true)
    {
        int sum = (A/div);
        if(sum==0)
            break;
        
        ans+=sum;
        div*=5;
    }
    return ans;
}
