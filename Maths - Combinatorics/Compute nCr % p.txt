/*
Compute nCr % p


Problem Description

Given three integers A, B and C, where A represents n, B represents r and C represents p and p is a prime number greater than equal to n, find and return the value of nCr % p where nCr % p = (n! / ((n-r)! * r!)) % p.

x! means factorial of x i.e. x! = 1 * 2 * 3... * x.

NOTE: For this problem, we are considering 1 as a prime.



Problem Constraints

1 <= A <= 106
1 <= B <= A
A <= C <= 109+7


Input Format

The first argument given is the integer A ( = n).
The second argument given is the integer B ( = r).
The third argument given is the integer C ( = p).



Output Format

Return the value of nCr % p.



Example Input

Input 1:

 A = 5
 B = 2
 C = 13
Input 2:

 A = 6
 B = 2
 C = 13


Example Output

Output 1:

 10
Output 2:

 2


Example Explanation

Explanation 1:

 nCr( n=5 and r=2) = 10.
 p=13. Therefore, nCr%p = 10.
 
 */
 
 
 long long int fastExp(long long int a, long long int b, long long int c)
{
    if(b==0)
        return 1;
    
    if(b%2==0)
    {
        return fastExp((a*a)%c, b/2, c);
    }
    else
    {
        return (a*fastExp((a*a)%c, (b-1)/2, c))%c;
    }
}

int Solution::solve(int A, int B, int C) {
    //nCr % p = (n! / ((n-r)! * r!)) % p.
    
    //nCr % p = (n!  * ((n-r)!)_inv % p * r!_inv % p)
    
    //(r!)_inv % p => (r!)^(p-2) % p (using fermats theorum) , can be done using factExponentiation.
  
    
    if(C==1)
        return 0;
        
    B=min(B,A-B);
    
    long long int nfact=1;
    long long int rfact=1;
    long long int nrfact=1;
    
    for(int i=1;i<=B;i++)
    {
        rfact=(rfact*i)%C;
    }
    
    //using rfact to calculate nrfact
    nrfact=rfact;
    for(int i=B+1;i<=(A-B);i++)
    {
         nrfact=(nrfact*i)%C;
    }
    
    //using nrfact to calculate nfact
    nfact=nrfact;
    for(int i=A-B+1;i<=A;i++)
    {
        nfact=(nfact*i)%C;
    }
    
    ////nCr % p = (n!  * ((n-r)!)_inv % p * r!_inv % p)
    long long int p1= fastExp(nrfact,C-2,C);
    long long int p2= fastExp(rfact, C-2,C);
    
    long long int ans= ((nfact * p1)%C * p2)%C;
    return ans;
    
}
