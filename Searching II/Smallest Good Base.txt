/*
Smallest Good Base


Given an integer A, we call k >= 2 a good base of A, if all digits of A base k are 1. Now given a string representing A, you should return the smallest good base of A in string format.


Input Format

The only argument given is the string representing A.
Output Format

Return the smallest good base of A in string format.
Constraints

3 <= A <= 10^18
For Example

Input 1:
    A = "13"
Output 1:
    "3"     (13 in base 3 is 111)

Input 2:
    A = "4681"
Output 2:
    "8"     (4681 in base 8 is 11111).
    
    */
    
    unsigned long long int convert_A_to_num(string A)
{
    unsigned long long int num=0;
    int l=A.length();
    for(int i=0;i<l;i++)
    {
        num*=10;
        num+=(A[i]-'0');
    }
    return num;
}
int check(long long int N, int len)
{
    long long int low=1;
    long long int high=N-1;
    long long int mid;
    while(low<=high)
    {
        mid = low + (high-low) / 2;
        long long int sum=1, cur=mid;
        bool overflow=false;
        for(int i=0; i<len-1;)
        {
            sum+=cur;
            if(++i==len-1) break;
            if(((double)cur)*mid > LONG_MAX - sum)
            {
                overflow=true;
                break;
            }
            cur*=mid;
        }

        if(overflow || sum>N){
            high=mid-1;
        } else if(sum<N){
            low=mid+1;
        }else{
            return mid;
        }
    }
    return -1;
}
string Solution::solve(string A) {
    unsigned long long int N = convert_A_to_num(A);
    long long answer = N - 1;

    int max_len = 0;
    for (int i = 0; i <= 64; i++)
    {
        if (N >> i) continue;
        max_len = i;
        break;
    }

    for(int i=3;i<=max_len;i++)
    {
        int curr_ans=check(N, i);
        if(curr_ans > 0 && curr_ans< answer) 
            answer=curr_ans;
    }
    return to_string(answer);
}

    
