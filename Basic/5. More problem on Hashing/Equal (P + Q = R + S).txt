/*
Problem Description

Given an array A of N integers, find the index of values that satisfy P + Q = R + S, where P,Q,R & S are integers values in the array

Expected time complexity O(N2)

NOTE:

1) Return the indices `A1 B1 C1 D1`, so that 
  A[A1] + A[B1] = A[C1] + A[D1]
  A1 < B1, C1 < D1
  A1 < C1, B1 != D1, B1 != C1 

2) If there are more than one solutions, 
   then return the tuple of values which are lexicographical smallest. 

Assume we have two solutions
S1 : A1 B1 C1 D1 ( these are values of indices in the array )  
S2 : A2 B2 C2 D2

S1 is lexicographically smaller than S2 if:
  A1 < A2 OR
  A1 = A2 AND B1 < B2 OR
  A1 = A2 AND B1 = B2 AND C1 < C2 OR 
  A1 = A2 AND B1 = B2 AND C1 = C2 AND D1 < D2
If no solution is possible, return an empty list.



Problem Constraints
1 <= N <= 1000

0 <= A[i] <= 1000



Input Format
Single argument which is an integer array A of size N.



Output Format
Return an array of size 4 which indexes of values P,Q,R and S.



Example Input
Input 1:

 A = [3, 4, 7, 1, 2, 9, 8]
Input 2:

 A = [2, 5, 1, 6]


Example Output
Output 1:

 [0, 2, 3, 5]
Output 2:

 [0, 1, 2, 3]


Example Explanation
Explanation 1:

 A[0] + A[2] = A[3] + A[5]
 Note: indexes returned should be 0-based.
Explanation 2:

 A[0] + A[1] = A[2] + A[3]
*/

struct value
{
    int a,b;
};
vector<int> Solution::equal(vector<int> &A) {
    int l=A.size();
    int sum;
    value temp;
    unordered_map<int,value> mp;
   // unordered_map<int,value> :: iterator it;
    vector<int> ans;
    ans.push_back(-1);
    
    for(int i=0;i<l;i++)
    {
        for(int j=i+1;j<l;j++)
        {
            sum=A[i]+A[j];
            if(mp.find(sum)!=mp.end())
            {
                temp= mp[sum];
                if(temp.a == i || temp.a==j || temp.b==i || temp.b==j)
                {
                    if(temp.a > i || (temp.a==i)  && temp.b > j)
                    {
                        temp.a=i;
                        temp.b=j;
                        mp[sum]=temp;
                    }
                }
                else
                {
                    if(ans.size()==1 || ans[0] > temp.a || (ans[0] == temp.a && ans[1] > temp.b) || (ans[0] == temp.a && ans[1] == temp.b && ans[2] > i) || (ans[0] == temp.a && ans[1] == temp.b && ans[2] == i && ans[3] > j) )
                    {
                        ans.clear();
                        ans.push_back(temp.a);
                        ans.push_back(temp.b);
                        ans.push_back(i);
                        ans.push_back(j);
                    }
                    
                }
            }
            else
            {
                temp.a=i;
                temp.b=j;
                mp[sum]=temp;
            }
        }
    }
    /*for(it=mp.begin();it!=mp.end();it++)
    {
        cout<<it->first<<" "<<it->second.a<<" "<<it->second.b<<endl;
    }*/
    
    
    //ans.push_back(-1);
    return ans;
}
