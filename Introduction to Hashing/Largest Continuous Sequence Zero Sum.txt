/*
Largest Continuous Sequence Zero Sum

Problem Description

Given an array A of N integers.

Find the largest continuous sequence in a array which sums to zero.



Problem Constraints

1 <= N <= 106

-107 <= A[i] <= 107



Input Format

Single argument which is an integer array A.



Output Format

Return an array denoting the longest continuous sequence with total sum of zero.

NOTE : If there are multiple correct answers, return the sequence which occurs first in the array.



Example Input

A = [1,2,-2,4,-4]


Example Output

[2,-2,4,-4]


Example Explanation

[2,-2,4,-4] is the longest sequence with total sum of zero.
*/

vector<int> Solution::lszero(vector<int> &A) {
    unordered_map<long long int, int> mp;
    long long int sum = 0;
    int start = 0, end, longest = -1;
    for (int i = 0; i < A.size(); i++)
    {
        sum += A[i];
        if (A[i] == 0 && longest == -1)
        {
            start = i;
            longest = 1;
        }
        else if (sum == 0 && longest < (i + 1))
        {
            start = 0;
            longest = i + 1;
        }
        if (mp.find(sum) != mp.end())
        {
            if (longest < (i - mp[sum]))
            {
                longest = i - mp[sum];
                start = mp[sum] + 1;
            }
        }
        else
            mp[sum] = i;
    }
    int i = 0;
    if(longest==-1)
    {
        vector<int> ans;
        return ans;
    }
    vector<int> ans(longest);

    while (longest--)
    {
        ans[i++] = A[start++];
    }
    return ans;
}
