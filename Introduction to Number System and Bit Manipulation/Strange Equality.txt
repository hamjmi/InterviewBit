/*
Strange Equality

Problem Description

Given an integer A.
Two numbers X and Y are defined as follows:

X is the greatest number smaller than A such that XOR sum of X and A is the same as the sum of X and A.
Y is the smallest number greater than A such that XOR sum of Y and A is the same as the sum of Y and A.
Find and return the XOR of X and Y.

NOTE 1: XOR of X and Y is defined as X ^ Y where '^' is the BITWISE XOR operator.

NOTE 2: Your code will be run against a maximum of 100000 Test Cases.



Problem Constraints

1 <= A <= 109



Input Format

First and only argument is an integer A.



Output Format

Return an integer denoting the XOR of X and Y.



Example Input

A = 5


Example Output

10


Example Explanation

The value of X will be 2 and the value of Y will be 8. The XOR of 2 and 8 is 10.
*/

/* 7 => 1 1 1
   4 => 1 0 0
   2 => 0 1 0
   1 => 0 0 1
   
   so we look at it 1^2^4 => 7
   we can separate each set bit and sum of those numbers and even xor will give same number.
   
   Here X is the greatest number smaller than A such that XOR sum of X and A is the same as the sum of X and A.
   so find the unset bit in A and set those in some number and we have X.
   
   Here Y is the smallest number greater than A such that XOR sum of Y and A is the same as the sum of Y and A.
   so Y is basically next higher power of 2 which is greater than A and their xor is equal to sum.
   
   return X^Y.
*/
int Solution::solve(int A) {
    int X=0;
    int i=0;
    while(A)
    {
        if((A&1)==0)
        {
            X|=(1<<i);
        }
        
        i++;
        A=A>>1;
    }
   
    int Y= (1<<(i));
    return X^Y;
}
