/*
Combination Sum


Problem Description

Given a set of candidate numbers A and a target number B, find all unique combinations in A where the candidate numbers sums to B.

The same repeated number may be chosen from A unlimited number of times.

Note:

1) All numbers (including target) will be positive integers.

2) Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).

3) The combinations themselves must be sorted in ascending order.

4) CombinationA > CombinationB iff (a1 > b1) OR (a1 = b1 AND a2 > b2) OR ... (a1 = b1 AND a2 = b2 AND ... ai = bi AND ai+1 > bi+1)

5) The solution set must not contain duplicate combinations.



Problem Constraints

1 <= |A| <= 20

1 <= A[i] <= 50

1 <= B <= 500



Input Format

First argument is the vector A.

Second argument is the integer B.



Output Format

Return a vector of all combinations that sum up to B.



Example Input

Input 1:

A = [2, 3]
B = 2
Input 2:

A = [2, 3, 6, 7]
B = 7


Example Output

Output 1:

[ [2] ]
Output 2:

[ [2, 2, 3] , [7] ]


Example Explanation

Explanation 1:

All possible combinations are listed.
Explanation 2:

All possible combinations are listed.
*/

vector<vector<int> > finalList;

void permute(vector<int> A, int index, int sum, vector<int> currentList)
{
	if (sum == 0)
	{
		finalList.push_back(currentList);
		/*for (int i = 0; i < currentList.size(); i++)
		{
			cout << currentList[i] << " ";
		}
		cout << endl;*/
		return;
	}
	if (index == A.size())
		return;
    
    //If it is less A[index] is less than sum , then we can either include it or exclude it.
    // If it is greater , then next index would definitely would be valid since they are in sorted manner
    // if A[] = {2,3,4}
    // i.e if sum < 2 , then we wont check for 3
    
	if ((sum - A[index]) >= 0)
	{
		currentList.push_back(A[index]);
		permute(A, index, sum - A[index], currentList);
		currentList.pop_back();
		permute(A, index + 1, sum, currentList);
	}

}

vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    set<int> s;
    set<int> :: iterator it;
    for(int i=0;i<A.size();i++)
        s.insert(A[i]);
    
    A.clear();
    for(it=s.begin();it!=s.end();it++)
        A.push_back(*it);
        
    /* it failed for duplicates , 
    so I'm removing them through set and presenting them in sorted manner */
    
	finalList.clear();
	vector<int> currentList;
	permute(A, 0, B, currentList);
	return finalList;
}
