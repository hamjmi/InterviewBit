/*
Problem Description

You're given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear time and constant additional space.
If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Example:

Input: [1 2 3 1 1]
Output: 1 
1 occurs 3 times which is more than 5/3 times.
*/

int Solution::repeatedNumber(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    int one=INT_MAX,two=INT_MAX;
    int count1=0,count2=0;
    
    for(int i=0;i<A.size();i++)
    {
        if(one==A[i])
        {
            count1++;
        }
        else if(two==A[i])
        {
            count2++;
        }
        else if(count1==0)
        {
            one=A[i];
            count1++;
        }
        else if(count2==0)
        {
            two=A[i];
            count2++;
        }
        else
        {
            count1--;
            count2--;
        }
    }
    
    count1=0;count2=0;
    for(int i=0;i<A.size();i++)
    {
        if(A[i]==one)
        {
            count1++;
        }
        else if(A[i]==two)
        {
            count2++;
        }
    }
    
    if(count1 > A.size()/3)
        return one;
    
    if(count2 > A.size()/3)
        return two;
        
    return -1;
}
